[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hello World!",
    "section": "",
    "text": "I’m Thanh, and I’m a current MS: Business Analytics student at CUNY Baruch. Nice to meet you!\nFeel free to check out my resume and reach out!\nAdd me on LinkedIn!"
  },
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Mini-Project #01",
    "section": "",
    "text": "Author: Thanh Dao\nUpdated: October 3rd, 2024"
  },
  {
    "objectID": "mp01.html#fare-revenue",
    "href": "mp01.html#fare-revenue",
    "title": "mp01",
    "section": "Fare Revenue",
    "text": "Fare Revenue\nlibrary(tidyverse) if(!file.exists(“2022_fare_revenue.xlsx”)){ download.file(“http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx”, destfile=“2022_fare_revenue.xlsx”, quiet=FALSE, method=“wget”) } FARES &lt;- readxl::read_xlsx(“2022_fare_revenue.xlsx”) |&gt; select(-State/Parent NTD ID, -Reporter Type, -Reporting Module, -TOS, -Passenger Paid Fares, -Organization Paid Fares) |&gt; filter(Expense Type == “Funds Earned During Period”) |&gt; select(-Expense Type)"
  },
  {
    "objectID": "mp01.html#expenses",
    "href": "mp01.html#expenses",
    "title": "mp01",
    "section": "Expenses",
    "text": "Expenses\nif(!file.exists(“2022_expenses.csv”)){ download.file(“https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true”, destfile=“2022_expenses.csv”, quiet=FALSE, method=“wget”) } EXPENSES &lt;- readr::read_csv(“2022_expenses.csv”) |&gt; select(NTD ID, Agency, Total, Mode) |&gt; mutate(NTD ID = as.integer(NTD ID)) |&gt; rename(Expenses = Total) |&gt; group_by(NTD ID, Mode) |&gt; summarize(Expenses = sum(Expenses)) |&gt; ungroup()\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(NTD ID, Mode))"
  },
  {
    "objectID": "mp01.html#monthly-transit-numbers",
    "href": "mp01.html#monthly-transit-numbers",
    "title": "mp01",
    "section": "Monthly Transit Numbers",
    "text": "Monthly Transit Numbers\nlibrary(tidyverse) if(!file.exists(“ridership.xlsx”)){ download.file(“https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx”, destfile=“ridership.xlsx”, quiet=FALSE, method=“wget”) } library(lubridate) # added for the my() function\nTRIPS &lt;- readxl::read_xlsx(“ridership.xlsx”, sheet=“UPT”) |&gt; filter(Mode/Type of Service Status == “Active”) |&gt; select(-Legacy NTD ID, -Reporter Type, -Mode/Type of Service Status, -UACE CD, -TOS) |&gt; pivot_longer(-c(NTD ID:3 Mode), names_to=“month”, values_to=“UPT”) |&gt; drop_na() |&gt; mutate(month=my(month)) MILES &lt;- readxl::read_xlsx(“ridership.xlsx”, sheet=“VRM”) |&gt; filter(Mode/Type of Service Status == “Active”) |&gt; select(-Legacy NTD ID, -Reporter Type, -Mode/Type of Service Status, -UACE CD, -TOS) |&gt; pivot_longer(-c(NTD ID:3 Mode), names_to=“month”, values_to=“VRM”) |&gt; drop_na() |&gt; group_by(NTD ID, Agency, UZA Name, Mode, 3 Mode, month) |&gt; summarize(VRM = sum(VRM)) |&gt; ungroup() |&gt; mutate(month=my(month))\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt; mutate(NTD ID = as.integer(NTD ID))"
  },
  {
    "objectID": "mp01.html#task-1-create-syntactic-names",
    "href": "mp01.html#task-1-create-syntactic-names",
    "title": "mp01",
    "section": "Task 1: Create Syntactic Names",
    "text": "Task 1: Create Syntactic Names\nUSAGE &lt;- rename(USAGE, “metro_area” = “UZA Name”) USAGE &lt;- rename(USAGE, “unlinked_passenger_trips” = “UPT”) USAGE &lt;- rename(USAGE, “vehicle_revenue_miles” = “VRM”)"
  },
  {
    "objectID": "mp01.html#task-2-recoding-the-mode-column",
    "href": "mp01.html#task-2-recoding-the-mode-column",
    "title": "mp01",
    "section": "Task 2: Recoding the Mode Column",
    "text": "Task 2: Recoding the Mode Column\nunique(USAGE$Mode) # Find the unique Mode codes\nUSAGE &lt;- USAGE |&gt; # Interpret the Mode column mutate(Mode = case_when( Mode == “AR” ~ “Alaska Railroad”, Mode == “CB” ~ “Commuter Bus”, Mode == “CC” ~ “Cable Car”, Mode == “CR” ~ “Commuter Rail”, Mode == “DR” ~ “Demand Response”, Mode == “FB” ~ “Ferryboat”, Mode == “HR” ~ “Heavy Rail”, Mode == “IP” ~ “Inclined Plane”, Mode == “LR” ~ “Light Rail”, Mode == “MB” ~ “Bus”, Mode == “MG” ~ “Monorail and Automated Guideway”, Mode == “PB” ~ “Publico”, Mode == “RB” ~ “Bus Rapid Transit”, Mode == “SR” ~ “Streetcar Rail”, Mode == “TB” ~ “Trolleybus”, Mode == “TR” ~ “Aerial Tramways”, Mode == “VP” ~ “Vanpool”, Mode == “YR” ~ “Hybrid Rail”, TRUE ~ “Unknown”))\nUSAGE &lt;- USAGE |&gt; # Remove “NTD ID” and “3 Mode” select(-c(“NTD ID”, “3 Mode”))\nif(!require(“DT”)) install.packages(“DT”) library(DT)\nsample_n(USAGE, 1000) |&gt; mutate(month=as.character(month)) |&gt; DT::datatable()"
  },
  {
    "objectID": "mp01.html#task-3-answering-instructor-specified-questions-with-dplyr",
    "href": "mp01.html#task-3-answering-instructor-specified-questions-with-dplyr",
    "title": "mp01",
    "section": "Task 3: Answering Instructor Specified Questions with dplyr",
    "text": "Task 3: Answering Instructor Specified Questions with dplyr"
  },
  {
    "objectID": "mp01.html#task-4-explore-and-analyze",
    "href": "mp01.html#task-4-explore-and-analyze",
    "title": "mp01",
    "section": "Task 4: Explore and Analyze",
    "text": "Task 4: Explore and Analyze"
  },
  {
    "objectID": "mp01.html#task-5-table-summarization",
    "href": "mp01.html#task-5-table-summarization",
    "title": "mp01",
    "section": "Task 5: Table Summarization",
    "text": "Task 5: Table Summarization"
  },
  {
    "objectID": "mp01.html#task-6-farebox-recovery-among-major-systems",
    "href": "mp01.html#task-6-farebox-recovery-among-major-systems",
    "title": "mp01",
    "section": "Task 6: Farebox Recovery Among Major Systems",
    "text": "Task 6: Farebox Recovery Among Major Systems"
  },
  {
    "objectID": "Lab Activity 1: Part 1.html",
    "href": "Lab Activity 1: Part 1.html",
    "title": "Lab Activity 1: Part 1",
    "section": "",
    "text": "If you’d like to reach me, you can contact me in the following ways:\n\nAdd me on [LinkedIn](https://www.linkedin.com/in/thanht-dao/)!\nEmail me at daothanht922@gmail.com"
  },
  {
    "objectID": "mp01.html#introduction",
    "href": "mp01.html#introduction",
    "title": "Mini-Project #01",
    "section": "Introduction",
    "text": "Introduction\nThere is a great variety of transportation systems and modes in America, spanning across land and water. Americans utilize all of them on a daily basis, commuting to wherever they need to go. In this report, the fiscal characteristics of major US public transit systems will be analyzed."
  },
  {
    "objectID": "mp01.html#findings",
    "href": "mp01.html#findings",
    "title": "Mini-Project #01",
    "section": "Findings",
    "text": "Findings"
  },
  {
    "objectID": "mp01.html#analysis",
    "href": "mp01.html#analysis",
    "title": "Mini-Project #01",
    "section": "Analysis",
    "text": "Analysis\nIn this sample, we can determine a few things.\nIf we were to examine the most total vehicle miles through the lens of transit mode, buses had the highest, with 49,444,494,088 miles.\nNow let’s take a closer look at the MTA New York City Transit, which was the agency with the most total vehicle revenue miles, of approximately 10,800,000,000 miles. When examining the MTA heavy rail, it can be determined that 180,458,819 trips were taken in May 2024.\nIn contrast to these high numbers, due to the COVID-19 pandemic, we can see the fall of NYC subway ridership fall between the time of April 2019 and April 2020, with ridership falling from 232,223,929 to 20,254,269, respectively. This points to a difference of 211,969,660 rides."
  },
  {
    "objectID": "mp01.html#farebox-recovery-analysis",
    "href": "mp01.html#farebox-recovery-analysis",
    "title": "Mini-Project #01",
    "section": "Farebox Recovery Analysis",
    "text": "Farebox Recovery Analysis\nTo fully analyze the farebox recovery data, a new table must be created from the previous table, narrowing down the data to specifically 2022. First, the obtained data needs to be edited to create the summary table.\n\n## Task 5: Table Summarization\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  mutate(year = year(month)) |&gt;\n  filter(year == 2022) |&gt;\n  group_by(NTD_ID, \n           Agency, \n           metro_area, \n           Mode, \n           unlinked_passenger_trips, \n           vehicle_revenue_miles) |&gt;\n  summarize(\n    total_upt = sum(unlinked_passenger_trips, na.rm = T),\n    total_vrm = sum(vehicle_revenue_miles, na.rm = T),\n    .groups = \"keep\",\n  ) |&gt;\n  ungroup()\n\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL, \n                                  FINANCIALS, \n                                  join_by(NTD_ID, Mode),\n                                  relationship = \"many-to-many\") |&gt;\n  drop_na()\n\nSecond, the table can be created.\n\n\n\n\n\n\n\nWhen analyzing the farebox recovery, it can be determined that the transit system with the most UPT in 2022 was the MTA New York CIty Transit, specifically the heavy rail, with 1,793,073,801 trips.\n\nmostUPT2022 &lt;- USAGE_AND_FINANCIALS |&gt;   # Create a new variable\n  group_by(Agency, Mode) |&gt;   # Look through the lens of Agency and Mode\n  filter(total_upt &gt; 400000) |&gt;  # Major Transit systems\n  summarize(total_upt2022 = sum(total_upt)) |&gt;  # Obtain the total UPT per what was grouped\n  arrange(desc(total_upt2022))  # Descending order\nhead(mostUPT2022, n=1)   # Get only the wanted data\n\n# A tibble: 1 × 3\n# Groups:   Agency [1]\n  Agency                    Mode       total_upt2022\n  &lt;chr&gt;                     &lt;chr&gt;              &lt;dbl&gt;\n1 MTA New York City Transit Heavy Rail    1793073801\n\n\nHowever, if examining the transit system with the highest farebox recovery, it would be the Anaheim Transportation Network, specifically the bus, with 0.865.\n\nhighestfarebox &lt;- USAGE_AND_FINANCIALS |&gt;   # Create a new variable \n  group_by(Agency, Mode) |&gt;   # Look through the lens of Agency and Mode\n  filter(total_upt &gt; 400000) |&gt;  # Major Transit systems\n  summarize(highestfarebox = sum(`Total Fares`) / sum (Expenses)) |&gt;  # Obtain the ratio of total fares to expenses\n  arrange(desc(highestfarebox))  # Descending order\nhead(highestfarebox, n=1)   # Get only the wanted data\n\n# A tibble: 1 × 3\n# Groups:   Agency [1]\n  Agency                         Mode  highestfarebox\n  &lt;chr&gt;                          &lt;chr&gt;          &lt;dbl&gt;\n1 Anaheim Transportation Network Bus            0.865\n\n\nMoving on, when examining the transit system with the lowest expenses per UPT, it would be the University of Georgia bus system, with $14.90 per trip.\n\nlowestexpenses &lt;- USAGE_AND_FINANCIALS |&gt;   # Create a new variable\n  group_by(Agency, Mode) |&gt;   # Look through the lens of Agency and Mode\n  filter(total_upt &gt; 400000) |&gt;  # Major Transit systems\n  summarize(lowestexpenses = sum(Expenses) / sum(total_upt)) |&gt;   # Obtain the ratio of expenses to UPT\n  arrange(desc(lowestexpenses))   # Descending order\ntail(lowestexpenses, n=1)   # Get only the wanted data\n\n# A tibble: 1 × 3\n# Groups:   Agency [1]\n  Agency                Mode  lowestexpenses\n  &lt;chr&gt;                 &lt;chr&gt;          &lt;dbl&gt;\n1 University of Georgia Bus             14.9\n\n\nComparatively, the transit system with lowest expenses per VRM is the Interurban Transit Partnership bus system, with $84.10 per mile.\n\nlowestexpensesvrm &lt;- USAGE_AND_FINANCIALS |&gt;   # Create a new variable \n  group_by(Agency, Mode) |&gt;   # Look through the lens of Agency and Mode\n  filter(total_upt &gt; 400000) |&gt;  # Major Transit systems\n  summarize(lowestexpensesvrm = sum(Expenses) / sum(total_vrm)) |&gt;   # Obtain the ratio of expenses to VRM\n  arrange(desc(lowestexpensesvrm))   # Descending order\ntail(lowestexpensesvrm, n=1)   # Get only the wanted data\n\n# A tibble: 1 × 3\n# Groups:   Agency [1]\n  Agency                         Mode  lowestexpensesvrm\n  &lt;chr&gt;                          &lt;chr&gt;             &lt;dbl&gt;\n1 Interurban Transit Partnership Bus                83.1\n\n\nMeanwhile, the transit system with the highest total fares per UPT is the Metro-North Commuter Railroad Company, with the bus, at $98.70 per trip.\n\nhighestfares &lt;- USAGE_AND_FINANCIALS |&gt;   # Create a new variable \n  group_by(Agency, Mode) |&gt;   # Look through the lens of Agency and Mode\n  filter(total_upt &gt; 400000) |&gt;  # Major Transit systems\n  summarize(highestfares = sum(`Total Fares`) / sum(total_upt)) |&gt;   # Obtain the ratio of total fares to UPT\n  arrange(desc(highestfares))   # Descending order\nhead(highestfares, n=1)   # Get only the wanted data\n\n# A tibble: 1 × 3\n# Groups:   Agency [1]\n  Agency                                                      Mode  highestfares\n  &lt;chr&gt;                                                       &lt;chr&gt;        &lt;dbl&gt;\n1 Metro-North Commuter Railroad Company, dba: MTA Metro-Nort… Comm…         98.7\n\n\nComparatively, the transit system with highest total fares per VRM is the Washington State Ferries with the ferryboat, at $937 per mile.\n\nhighestfaresvrm &lt;- USAGE_AND_FINANCIALS |&gt;   # Create a new variable\n  group_by(Agency, Mode) |&gt;   # Look through the lens of Agency and Mode\n  filter(total_upt &gt; 400000) |&gt;   # Major Transit systems\n  summarize(highestfaresvrm = sum(`Total Fares`) / sum(total_vrm)) |&gt;  # obtain the ratio of total fares to VRM\n  arrange(desc(highestfaresvrm))   # Descending order\nhead(highestfaresvrm, n=1)   # Get only the wanted data\n\n# A tibble: 1 × 3\n# Groups:   Agency [1]\n  Agency                   Mode      highestfaresvrm\n  &lt;chr&gt;                    &lt;chr&gt;               &lt;dbl&gt;\n1 Washington State Ferries Ferryboat            937."
  },
  {
    "objectID": "mp01.html#conclusions",
    "href": "mp01.html#conclusions",
    "title": "Mini-Project #01",
    "section": "Conclusions",
    "text": "Conclusions\nOverall, the most efficient transit system in the country is the MTA New York City Transit. It is the largest North American transit system, and has proven that it is as efficient as its size. It has the most total and average vehicle revenue miles. Additionally, in 2022, it was the transit system with the most unlinked passenger trips."
  },
  {
    "objectID": "mp01.html#main-analysis",
    "href": "mp01.html#main-analysis",
    "title": "Mini-Project #01",
    "section": "Main Analysis",
    "text": "Main Analysis\nUsing this table, the following analyses can be done.\nThe transit agency with the most total VRM in this data set can be determined with the following code:\n\nUSAGE |&gt;   \n  group_by(Agency) |&gt;\n  summarize(total_vrm = sum(vehicle_revenue_miles, na.rm = T)) |&gt;\n  arrange(desc(total_vrm)) |&gt;\n  slice(1)\n\n# A tibble: 1 × 2\n  Agency                      total_vrm\n  &lt;chr&gt;                           &lt;dbl&gt;\n1 MTA New York City Transit 10832855350\n\n\nBased on this, it can be determined that the MTA New York City Transit had the most total VRM, of approximately 10,800,000,000 miles.\nComparatively, a similar code can be used to determine the transit mode with the most total VRM:\n\nUSAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(total_vrm = sum(vehicle_revenue_miles, na.rm = T)) |&gt;\n  arrange(desc(total_vrm)) |&gt;\n  slice(1)\n\n# A tibble: 1 × 2\n  Mode    total_vrm\n  &lt;chr&gt;       &lt;dbl&gt;\n1 Bus   49444494088\n\n\nIt can be determined that buses had the most total VRM, with 49,444,494,088 miles.\nNow, a closer look will be had on the MTA, specifically the number of trips taken on the NYC Subway in May 2024:\n\nUSAGE$month &lt;- as.character(USAGE$month)  \nUSAGE |&gt;\n  filter(USAGE$Agency == \"MTA New York City Transit\",\n         USAGE$Mode == \"Heavy Rail\",\n         USAGE$month == \"2024-05-01\")\n\n# A tibble: 1 × 7\n  NTD_ID Agency                    metro_area Mode  month unlinked_passenger_t…¹\n   &lt;int&gt; &lt;chr&gt;                     &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1  20008 MTA New York City Transit New York-… Heav… 2024…              180458819\n# ℹ abbreviated name: ¹​unlinked_passenger_trips\n# ℹ 1 more variable: vehicle_revenue_miles &lt;dbl&gt;\n\n\nHere, in May 2024, 180,458,819 trips were taken.\nWhile this number is indeed high, it would be interesting to analyze the impact the COVID-19 pandemic had on NYC Subway ridership. To do so, the fall of NYC subway ridership between April 2019 and April 2020 needs to be determined:\n\nUSAGE |&gt; \n  filter(USAGE$Agency == \"MTA New York City Transit\", #2019\n         USAGE$Mode == \"Heavy Rail\",\n         USAGE$month == \"2019-04-01\")\n\n# A tibble: 1 × 7\n  NTD_ID Agency                    metro_area Mode  month unlinked_passenger_t…¹\n   &lt;int&gt; &lt;chr&gt;                     &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1  20008 MTA New York City Transit New York-… Heav… 2019…              232223929\n# ℹ abbreviated name: ¹​unlinked_passenger_trips\n# ℹ 1 more variable: vehicle_revenue_miles &lt;dbl&gt;\n\nUSAGE |&gt;\n  filter(USAGE$Agency == \"MTA New York City Transit\", #2020\n         USAGE$Mode == \"Heavy Rail\",\n         USAGE$month == \"2020-04-01\")\n\n# A tibble: 1 × 7\n  NTD_ID Agency                    metro_area Mode  month unlinked_passenger_t…¹\n   &lt;int&gt; &lt;chr&gt;                     &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;                  &lt;dbl&gt;\n1  20008 MTA New York City Transit New York-… Heav… 2020…               20254269\n# ℹ abbreviated name: ¹​unlinked_passenger_trips\n# ℹ 1 more variable: vehicle_revenue_miles &lt;dbl&gt;\n\n\nBased on this information, ridership fell from 232,223,929 in April 2019 to 20,254,269 in April 2020. This points to a difference of 211,969,660 rides."
  },
  {
    "objectID": "mp01.html#additional-analysis",
    "href": "mp01.html#additional-analysis",
    "title": "Mini-Project #01",
    "section": "Additional Analysis",
    "text": "Additional Analysis\nPreviously, buses were determined to be the transit mode with the most total VRM. It would be interesting to determine the opposite:\n\nUSAGE |&gt; \n  group_by(Mode) |&gt;   # Look through the lens of transportation mode\n  summarize(total_vrm = sum(vehicle_revenue_miles, na.rm = T)) |&gt;   # Obtain the total VRM per mode\n  arrange(total_vrm) |&gt;   # Ascending order\n  slice(1)   # Obtain the top data point\n\n# A tibble: 1 × 2\n  Mode            total_vrm\n  &lt;chr&gt;               &lt;dbl&gt;\n1 Aerial Tramways    292860\n\n\nIn contrast to buses, aerial tramways were the transit mode with the least total VRM, with 292,850 miles.\nThis is a difference of 49,444,201,238 miles. While this might feel drastic, it makes sense. Aerial tramways, vehicles suspended from a system of cables that are propelled through a suspension system, are not commonly used, which attributes to their low mileage. On the other hand, buses are used extensively, with there being numerous routes that run daily, attributing to their high mileage.\nFollowing this contrast, the agency with the least total VRM was Barnegat Bay Decoy & Baymen’s Museum, with 2,312 miles.\n\nUSAGE |&gt;\n  group_by(Agency) |&gt;   # Look through the lens of transportation agency   \n  summarize(total_vrm = sum(vehicle_revenue_miles, na.rm = T)) |&gt;   # Obtain the total VRM per agency\n  arrange(total_vrm) |&gt;   # Ascending order\n  slice(1)   # Obtain the top data point\n\n# A tibble: 1 × 2\n  Agency                               total_vrm\n  &lt;chr&gt;                                    &lt;dbl&gt;\n1 Barnegat Bay Decoy & Baymen's Museum      2312\n\n\nCompared to the MTA, there is a difference of 10,799,997,688 miles. This large difference can be attributed to the vast difference in sizes between the two. The MTA is the largest transportation system in North America. On the other hand, Barnegat is only a 40 acre cultural center meant to preserve the maritime history of the Jersey Shore. The VRM accumulated correlate to the size and population attributed to each agency.\nBecause the MTA in NYC has been established as having the largest VRM, examining which location has the second highest average vehicle revenue miles, after the New York / New Jersey area, would be interesting.\n\nUSAGE |&gt; \n  group_by(metro_area) |&gt;   # Look through the lens of location\n  summarize(average_vrm = mean(vehicle_revenue_miles, na.rm = T)) |&gt; # Obtain the average VRM per location\n  arrange(desc(average_vrm)) |&gt;   # Descending order\n  slice(2)   # Obtain the second data point\n\n# A tibble: 1 × 2\n  metro_area         average_vrm\n  &lt;chr&gt;                    &lt;dbl&gt;\n1 Denver--Aurora, CO    1565688.\n\n\nThis turns out to be Denver, Colorado, with 1,565,688 average VRM. This is a 244,360 mile difference to NYC, with 1,810,058 miles."
  },
  {
    "objectID": "mp01.html#obtaining-data",
    "href": "mp01.html#obtaining-data",
    "title": "Mini-Project #01",
    "section": "Obtaining Data",
    "text": "Obtaining Data\nThis report runs on R; thus, the necessary packages must be installed prior to any data collection or analysis.\n\n# Install the necessary R packages\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(lubridate)  # added for the my() function\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nNow that the necessary packages have been installed, data collection from the National Transit Database can proceed.\n\n# Download the \"Fare Revenue\" Data\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n  download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                destfile=\"2022_fare_revenue.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\n\n# Select the columns within the scope of research for this report\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`, \n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`)\n\n# Download the \"Expenses\" Data\nif(!file.exists(\"2022_expenses.csv\")){\n  download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                destfile=\"2022_expenses.csv\", \n                quiet=FALSE, \n                method=\"wget\")\n}\n\n# Select the columns within the scope of research for this report\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n  select(`NTD ID`, \n         `Agency`,\n         `Total`, \n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\n# Combine the selected \"Fare Revenue\" and \"Expenses\" Data\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`)) \n\n# Download the \"Monthly Transit Numbers\" Data\nif(!file.exists(\"ridership.xlsx\")){\n  download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                destfile=\"ridership.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\n\n# Select the columns within the scope of research for this report\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) \nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`, \n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month))\n\n# Combine the selected \"Monthly Transit Numbers\" Data\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))"
  },
  {
    "objectID": "mp01.html#initial-data-table",
    "href": "mp01.html#initial-data-table",
    "title": "Mini-Project #01",
    "section": "Initial Data Table",
    "text": "Initial Data Table\nUsing the data just obtained from the National Transit Database, the following table can be created:\n\n\n\n\n\n\n\nUnfortunately, this data still some flaws that need to be fixed."
  },
  {
    "objectID": "mp01.html#cleaning-the-data",
    "href": "mp01.html#cleaning-the-data",
    "title": "Mini-Project #01",
    "section": "Cleaning the Data",
    "text": "Cleaning the Data\nTo the average person, “UZA Name” doesn’t provide proper context or meaning; thus, it needs to be changed to something people will understand, like “Metro Area.” The same can be said about “UPT” and “VRM”; these also need to be changed, as follows:\n\n# Task 1: Create Syntactic Names\nUSAGE &lt;- rename(USAGE, \"metro_area\" = \"UZA Name\",\n                \"unlinked_passenger_trips\" = \"UPT\",\n                \"vehicle_revenue_miles\" = \"VRM\",\n                \"NTD_ID\" = \"NTD ID\")\nFINANCIALS &lt;- rename(FINANCIALS, \"NTD_ID\" = \"NTD ID\")\n\nNow that some column headers have been renamed, focus can be made on the “Mode” column. All of these modes of transport are acronyms that would need to be looked up to be understood. For user ease, they’ll be changed as follows:\n\n# Task 2: Recoding the Mode Column\nUSAGE &lt;- USAGE |&gt;                    # Interpret the Mode column in \"USAGE\"\n  mutate(Mode = case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"TR\" ~ \"Aerial Tramways\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    TRUE ~ \"Unknown\"))\n\nFINANCIALS &lt;- FINANCIALS |&gt;          # Interpret the Mode column in \"Financials\"\n  mutate(Mode = case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"TR\" ~ \"Aerial Tramways\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    TRUE ~ \"Unknown\"))\n\nUnnecessary columns will be removed as well.\n\nUSAGE &lt;- USAGE |&gt;           # Remove \"3 Mode\"\n  select(-c(\"3 Mode\"))\n\nNow that the data is cleaned up, a new table can be established, as follows:"
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "Mini-Project #02",
    "section": "",
    "text": "Author: Thanh Dao\nUpdated: October 22nd, 2024 @ 1:25PM"
  },
  {
    "objectID": "mp02.html#name_basics",
    "href": "mp02.html#name_basics",
    "title": "Mini-Project #02",
    "section": "NAME_BASICS",
    "text": "NAME_BASICS\n\n# Use the glimpse function\nglimpse(NAME_BASICS)\n\nRows: 2,460,608\nColumns: 6\n$ nconst            &lt;chr&gt; \"nm0000001\", \"nm0000002\", \"nm0000003\", \"nm0000004\", …\n$ primaryName       &lt;chr&gt; \"Fred Astaire\", \"Lauren Bacall\", \"Brigitte Bardot\", …\n$ birthYear         &lt;chr&gt; \"1899\", \"1924\", \"1934\", \"1949\", \"1918\", \"1915\", \"189…\n$ deathYear         &lt;chr&gt; \"1987\", \"2014\", \"\\\\N\", \"1982\", \"2007\", \"1982\", \"1957…\n$ primaryProfession &lt;chr&gt; \"actor,miscellaneous,producer\", \"actress,soundtrack,…\n$ knownForTitles    &lt;chr&gt; \"tt0072308,tt0050419,tt0053137,tt0027125\", \"tt003738…\n\n\nIn this table, we can see the non-standard “null” values are within the birthYear and deathYear columns. To fix this, the following code will be run:\n\n# Mutate the specified columns\nNAME_BASICS &lt;- suppressWarnings(\n  NAME_BASICS |&gt;\n  mutate(birthYear = as.numeric(birthYear),\n         deathYear = as.numeric(deathYear))\n  )"
  },
  {
    "objectID": "mp02.html#title_basics",
    "href": "mp02.html#title_basics",
    "title": "Mini-Project #02",
    "section": "TITLE_BASICS",
    "text": "TITLE_BASICS\n\n# Use the glimpse function\nglimpse(TITLE_BASICS)\n\nRows: 372,198\nColumns: 9\n$ tconst         &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt…\n$ titleType      &lt;chr&gt; \"short\", \"short\", \"short\", \"short\", \"short\", \"short\", \"…\n$ primaryTitle   &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Pauvre Pierrot…\n$ originalTitle  &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Pauvre Pierrot…\n$ isAdult        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ startYear      &lt;dbl&gt; 1894, 1892, 1892, 1892, 1893, 1894, 1894, 1894, 1894, 1…\n$ endYear        &lt;chr&gt; \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\",…\n$ runtimeMinutes &lt;chr&gt; \"1\", \"5\", \"5\", \"12\", \"1\", \"1\", \"1\", \"1\", \"45\", \"1\", \"1\"…\n$ genres         &lt;chr&gt; \"Documentary,Short\", \"Animation,Short\", \"Animation,Come…\n\n\nIn this table, we can see the non-standard “null” values are within the endYear, runtimeMinutes, and genres columns. To fix this, the following code will be run:\n\n# Mutate the specified columns\nTITLE_BASICS &lt;- suppressWarnings(\n  TITLE_BASICS |&gt;\n    mutate(runtimeMinutes = as.numeric(runtimeMinutes),\n           endYear = as.numeric(endYear),\n           genres = na_if(genres, \"\\\\N\"))\n)"
  },
  {
    "objectID": "mp02.html#title_crew",
    "href": "mp02.html#title_crew",
    "title": "Mini-Project #02",
    "section": "TITLE_CREW",
    "text": "TITLE_CREW\n\n# Use the glimpse function\nglimpse(TITLE_CREW)\n\nRows: 371,902\nColumns: 3\n$ tconst    &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt00000…\n$ directors &lt;chr&gt; \"nm0005690\", \"nm0721526\", \"nm0721526\", \"nm0721526\", \"nm00056…\n$ writers   &lt;chr&gt; \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"nm0…\n\n\nIn this table, we can see the non-standard “null” values are within the directors and writers columns. To fix this, the following code will be run:\n\n# Mutate the specified columns\nTITLE_CREW &lt;- suppressWarnings(\n  TITLE_CREW |&gt;\n    mutate(directors = na_if(directors, \"\\\\N\"),\n           writers = na_if(writers, \"\\\\N\"))\n)"
  },
  {
    "objectID": "mp02.html#title_episodes",
    "href": "mp02.html#title_episodes",
    "title": "Mini-Project #02",
    "section": "TITLE_EPISODES",
    "text": "TITLE_EPISODES\n\n# Use the glimpse function\nglimpse(TITLE_EPISODES)\n\nRows: 3,007,178\nColumns: 4\n$ tconst        &lt;chr&gt; \"tt0045960\", \"tt0046855\", \"tt0048378\", \"tt0048562\", \"tt0…\n$ parentTconst  &lt;chr&gt; \"tt0044284\", \"tt0046643\", \"tt0047702\", \"tt0047768\", \"tt0…\n$ seasonNumber  &lt;chr&gt; \"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"3\", \"3\", \"…\n$ episodeNumber &lt;chr&gt; \"3\", \"4\", \"6\", \"10\", \"4\", \"20\", \"5\", \"2\", \"20\", \"6\", \"2\"…\n\n\nIn this table, we can see the non-standard “null” values are within the seasonNumber and episodeNumber columns. To fix this, the following code will be run:\n\n# Mutate the specified columns\nTITLE_EPISODES &lt;- suppressWarnings(\n  TITLE_EPISODES |&gt;\n    mutate(seasonNumber = as.numeric(seasonNumber),\n           episodeNumber = as.numeric(episodeNumber))\n)"
  },
  {
    "objectID": "mp02.html#title_principals",
    "href": "mp02.html#title_principals",
    "title": "Mini-Project #02",
    "section": "TITLE_PRINCIPALS",
    "text": "TITLE_PRINCIPALS\n\n# Use the glimpse function\nglimpse(TITLE_PRINCIPALS)\n\nRows: 6,586,689\nColumns: 6\n$ tconst     &lt;chr&gt; \"tt0000001\", \"tt0000001\", \"tt0000001\", \"tt0000001\", \"tt0000…\n$ ordering   &lt;dbl&gt; 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 5, 1, 2, 1, 2, 3, 1, 2, 3, 4,…\n$ nconst     &lt;chr&gt; \"nm1588970\", \"nm0005690\", \"nm0005690\", \"nm0374658\", \"nm0721…\n$ category   &lt;chr&gt; \"self\", \"director\", \"producer\", \"cinematographer\", \"directo…\n$ job        &lt;chr&gt; \"\\\\N\", \"\\\\N\", \"producer\", \"director of photography\", \"\\\\N\",…\n$ characters &lt;chr&gt; \"[\\\"Self\\\"]\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\…\n\n\nIn this table, we can see the non-standard “null” values are within the job and characters columns. To fix this, the following code will be run:\n\n# Mutate the specified columns\nTITLE_PRINCIPALS &lt;- suppressWarnings(\n  TITLE_PRINCIPALS |&gt;\n    mutate(job = na_if(job, \"\\\\N\"),\n           characters = na_if(characters, \"\\\\N\"))\n)"
  },
  {
    "objectID": "mp02.html#title_ratings",
    "href": "mp02.html#title_ratings",
    "title": "Mini-Project #02",
    "section": "TITLE_RATINGS",
    "text": "TITLE_RATINGS\n\n# Use the glimpse function\nglimpse(TITLE_RATINGS)\n\nRows: 372,198\nColumns: 3\n$ tconst        &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt0…\n$ averageRating &lt;dbl&gt; 5.7, 5.6, 6.5, 5.4, 6.2, 5.0, 5.4, 5.4, 5.4, 6.8, 5.2, 7…\n$ numVotes      &lt;dbl&gt; 2090, 283, 2094, 184, 2828, 196, 889, 2233, 214, 7699, 3…\n\n\nIn this table, we can see the non-standard “null” values are within the averageRating and numVotes columns. To fix this, the following code will be run:\n\n# Mutate the specified columns\nTITLE_RATINGS &lt;- suppressWarnings(\n  TITLE_RATINGS |&gt;\n    mutate(averageRating = as.numeric(averageRating),\n           numVotes = as.numeric(numVotes))\n)\n\nNow, all of the column types have been fixed, and any non-standard “null” values have been made to be NA."
  },
  {
    "objectID": "mp02.html#simple-analysis",
    "href": "mp02.html#simple-analysis",
    "title": "Mini-Project #02",
    "section": "Simple Analysis",
    "text": "Simple Analysis\nUsing the tables as they are, we can do some simple analyses.\nFirst, we’ll examine the works present.\nWe can quantify the number of movies, TV series, and TV episodes in the data set with the following code:\n\n# Determine the unique values in the titleType column of TITLE_BASICS\nunique(TITLE_BASICS$titleType)\n\n [1] \"short\"        \"movie\"        \"tvSeries\"     \"tvShort\"      \"tvMovie\"     \n [6] \"tvEpisode\"    \"tvMiniSeries\" \"video\"        \"tvSpecial\"    \"videoGame\"   \n\n# Find the number of movies\nmovie_count &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"movie\") |&gt;\n  summarize(count = n())\nprint(movie_count)\n\n# A tibble: 1 × 1\n   count\n   &lt;int&gt;\n1 131662\n\n# Find the number of TV series\nseries_count &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"tvSeries\") |&gt;\n  summarize(count = n())\nprint(series_count)\n\n# A tibble: 1 × 1\n  count\n  &lt;int&gt;\n1 29789\n\n# Find the number of TV episodes\nepisode_count &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"tvEpisode\") |&gt;\n  summarize(count = n())\nprint(episode_count)\n\n# A tibble: 1 × 1\n   count\n   &lt;int&gt;\n1 155722\n\n\nWe can determine that there are 131,662 movies, 29,789 TV series, and 155,722 TV episodes in the data set.\nNext, we can determine which long running TV series has the highest average rating with the following code:\n\n# Find the TV series with more than 12 ep + highest average rating\nhighest_rated_title &lt;- TITLE_EPISODES |&gt;\n  filter(episodeNumber &gt;= 12) |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\") |&gt;\n  arrange(desc(averageRating)) |&gt;\n  slice(1)\n\n# Get the tconst from the TV series \nhighest_tconst &lt;- highest_rated_title$tconst\n\n# Get the actual TV series title\ncorresponding_title &lt;- TITLE_BASICS |&gt;\n  filter(tconst == highest_tconst)\nprint(corresponding_title)\n\n# A tibble: 1 × 9\n  tconst     titleType primaryTitle      originalTitle isAdult startYear endYear\n  &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;             &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 tt10867894 tvEpisode I challenge the … I challenge …       0      2019      NA\n# ℹ 2 more variables: runtimeMinutes &lt;dbl&gt;, genres &lt;chr&gt;\n\n\nWe can also see that the TV series with more than 12 episodes with the highest average rating is I challenge the Ender Dragon in Minecraft (Ending).\nWhen specifically looking at the TV series Happy Days, a controversial episode aired in 1977, which resulted in a belief that later seasons of the series had lower average ratings than earlier seasons. This specifically refers to:\n\nEarlier seasons: 1974 - 1984\nLater seasons: 2008 - present\n\n\n# Find the tconst of Happy Days (earlier and later)\nHD_early_tconst &lt;- TITLE_BASICS |&gt;  # earlier\n  filter(titleType == \"tvSeries\", \n         primaryTitle == \"Happy Days\",\n         startYear == 1974) |&gt;\n  select(tconst) |&gt;\n  pull()\n\nHD_late_tconst &lt;- TITLE_BASICS |&gt;  # later\n  filter(titleType == \"tvSeries\", \n         primaryTitle == \"Happy Days\",\n         startYear == 2008) |&gt;\n  select(tconst) |&gt;\n  pull()\n\n# Find the average ratings\nHD_early_rating &lt;- TITLE_RATINGS |&gt;  # earlier\n  filter(tconst == HD_early_tconst) |&gt;\n  select(averageRating)\n\nHD_late_rating &lt;- TITLE_RATINGS |&gt;  # later\n  filter(tconst == HD_late_tconst) |&gt;\n  select(averageRating)\n\nprint(HD_early_rating)  # earlier\n\n# A tibble: 1 × 1\n  averageRating\n          &lt;dbl&gt;\n1           7.4\n\nprint(HD_late_rating)  # later\n\n# A tibble: 1 × 1\n  averageRating\n          &lt;dbl&gt;\n1           5.4\n\n\nWe can determine that this belief is true, with the earlier seasons achieving an average rating of 7.4, and the later seasons only having a 5.4.\nSecond, we’ll examine the people present.\nLets say we want to find the oldest living person in the dataset. This is based on a reasonable cutoff birth year of 1920, as some data regarding the death year is missing (for example, Robert De Visée was born in 1655, but has no death year listed).\n\n# Set the cutoff year\ncutoff &lt;- 1920\n\n# Filter for people still alive and born after 1920\noldest_alive &lt;- NAME_BASICS |&gt;\n  filter(!is.na(birthYear) & is.na(deathYear) & birthYear &gt;= cutoff) |&gt;\n  arrange(birthYear) |&gt;\n  slice_head(n=1)\n\n# Print the result\nprint(oldest_alive)\n\n# A tibble: 1 × 6\n  nconst    primaryName  birthYear deathYear primaryProfession knownForTitles   \n  &lt;chr&gt;     &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;             &lt;chr&gt;            \n1 nm0010114 Lily Aclemar      1920        NA actress           tt0039458,tt0042…\n\n\nWe can determine that the oldest living person in the data set is Lily Aclemar.\nNow, we’re going to look at famous actor Mark Hamill.\n\n# Find the specific IDs for Hamill's works\nmark_titles &lt;- NAME_BASICS |&gt;\n  filter(primaryName == \"Mark Hamill\") |&gt;\n  separate_longer_delim(knownForTitles, \",\") |&gt;\n  pull(knownForTitles)\n\n# Find the corresponding names for the IDs just found\nmark_titles_names &lt;- TITLE_BASICS |&gt;\n  filter(tconst %in% mark_titles) |&gt;\n  select(primaryTitle)\nprint(mark_titles_names)\n\n# A tibble: 4 × 1\n  primaryTitle                                  \n  &lt;chr&gt;                                         \n1 Star Wars: Episode IV - A New Hope            \n2 Star Wars: Episode V - The Empire Strikes Back\n3 Star Wars: Episode VI - Return of the Jedi    \n4 Star Wars: Episode VIII - The Last Jedi       \n\n\nFrom the code, we can determine that the four projects he is most known for are:\n\nStar Wars: Episode IV - A New Hope\nStar Wars: Episode V - The Empire Strikes Back\nStar Wars: Episode VI - Return of the Jedi\nStar Wars: Episode VIII - The Last Jedi\n\nIn these projects, Hamill played the iconic role of Luke Skywalker, a Jedi and son of Anakin Skywalker turned Darth Vader."
  },
  {
    "objectID": "mp02.html#find-a-director",
    "href": "mp02.html#find-a-director",
    "title": "Mini-Project #02",
    "section": "Find a Director",
    "text": "Find a Director\nFirst, we must find a director for the film.\n\n# Combine TITLE_BASICS and TITLE_RATINGS on \"tconst\"\ncombo &lt;- TITLE_RATINGS |&gt;\n  left_join(TITLE_BASICS, by = \"tconst\")\n\n# Filter for successful action movies\naction_movies &lt;- combo |&gt;\n  filter(titleType == \"movie\", \n         genres == \"Action\", \n         success == TRUE)\n\n# Separate + merge to get director information\ndirectors &lt;- NAME_BASICS |&gt;\n  separate_longer_delim(primaryProfession, \",\") |&gt;\n  filter(primaryProfession == \"director\") |&gt;\n  select(primaryName, knownForTitles)\n\n# Separate knownForTitles in directors dataset\ndirectors &lt;- directors |&gt;\n  separate_longer_delim(knownForTitles, \",\")\n\n# Join the action movies with directors to find top directors\ntop_directors &lt;- action_movies |&gt;\n  left_join(directors, \n            by = c(\"tconst\" = \"knownForTitles\")) |&gt;\n  group_by(primaryName, tconst, primaryTitle, averageRating, numVotes) |&gt;\n  summarize(success_count = n(), \n            .groups = \"drop\") |&gt;\n  arrange(desc(success_count)) |&gt;\n  slice_head(n = 5)\n\n# Print the top 5 directors for action movies\nprint(top_directors)\n\n# A tibble: 1 × 6\n  primaryName  tconst     primaryTitle averageRating numVotes success_count\n  &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;                &lt;dbl&gt;    &lt;dbl&gt;         &lt;int&gt;\n1 Sonia Bhatia tt14056466 Yudhra                 8.1    11139             1\n\n\nBased on this code, we will select Sonia Bhatia as the director of this film. She previously worked on Yudhra, which received an impressive average IMDb rating of 8.1, out of 11,139 ratings."
  },
  {
    "objectID": "mp02.html#find-2-actors",
    "href": "mp02.html#find-2-actors",
    "title": "Mini-Project #02",
    "section": "Find 2 Actors",
    "text": "Find 2 Actors\nInstead of finding actors with extensive experience in successful action movies, we will look at actors that are well known; that is, actors that have appeared in a minimum of 3 successful movies. This would certainly spark intrigue in the public, bringing more attention to the film.\n\n# Combine TITLE_BASICS and TITLE_RATINGS on \"tconst\"\ncombo &lt;- TITLE_RATINGS |&gt;\n  left_join(TITLE_BASICS, by = \"tconst\")\n\n# Filter for successful movies\nsuccessful_movies &lt;- combo |&gt;\n  filter(success == TRUE)\n\n# Separate actors in NAME_BASICS\nactors &lt;- NAME_BASICS |&gt;\n  separate_longer_delim(primaryProfession, \",\") |&gt;\n  filter(primaryProfession %in% c(\"actor\", \"actress\")) |&gt;\n  select(nconst, primaryName, knownForTitles)\n\n# Separate knownForTitles for each actor\nactors &lt;- actors |&gt;\n  separate_longer_delim(knownForTitles, \",\")\n\n# Join the successful movies with actors\nactor_movies &lt;- successful_movies |&gt;\n  left_join(actors, by = c(\"tconst\" = \"knownForTitles\"))\n\n# Movie actors\nmovie_actors &lt;- actor_movies |&gt;\n  filter(titleType == \"movie\")\n\n# Count # of successful movies for each actor\nactor_success_count &lt;- movie_actors |&gt;\n  group_by(nconst, primaryName) |&gt;\n  summarize(success_count = n(), \n            .groups = \"drop\")\n\n# Filter for actors who have appeared in at least 3 successful movies\nactors_with_3_successes &lt;- actor_success_count |&gt;\n  filter(success_count &gt;= 3) |&gt;\n  arrange(desc(success_count))\n\n# Make a table\ndatatable(actors_with_3_successes)\n\n\n\n\n\nThis code displays all the actors that have appeared in at least 3 successful movies, in descending order, in a table.\nWe will only be selecting 2; therefore, we will run a code that will display only the top 5 actors within this table in a graph, and select from there.\n\n# Select the top 5 actors\ntop_5_actors &lt;- actors_with_3_successes |&gt;\n  slice_head(n = 5)\n\n# Bar graph\nggplot(top_5_actors, \n       aes(x = reorder(primaryName, success_count), \n           y = success_count, \n           fill = primaryName)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Top 5 Actors with Most Successful Movies\",\n       x = \"Actor\",\n       y = \"Number of Successful Movies\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nThe top candidate doesn’t count, as it is just the compilation of all the unnamed actors that meet the criteria. Following this is Charles Chaplin, who is unfortunately dead and will not be able to be reached through non-paranormal means.\nAfter all of this analysis, we will select Kevin Spacey and Elijah Wood to star in the film."
  },
  {
    "objectID": "mp02.html#pitch-the-personnel",
    "href": "mp02.html#pitch-the-personnel",
    "title": "Mini-Project #02",
    "section": "Pitch the Personnel",
    "text": "Pitch the Personnel\nKevin Spacey and Elijah Wood would form an intriguing duo for this action movie, blending Spacey’s intense, nuanced performances with Wood’s unique charm and versatility. Spacey is renowned for his ability to portray morally complex characters, while Wood brings youthful energy and a knack for playing quirky, relatable roles, making him the ideal counterpart. Together, they promise to create dynamic on-screen chemistry that elevates the story. With director Sonia Bhatia’s fresh perspective, the film is set to deliver a visually stunning and engaging narrative."
  },
  {
    "objectID": "mp02.html#select-the-movie",
    "href": "mp02.html#select-the-movie",
    "title": "Mini-Project #02",
    "section": "Select the Movie",
    "text": "Select the Movie\nFirst, we’re going to look at all of the successful action movies to date. We will also remove any remakes; we want to be the first remake of the classic we select.\n\n# Merge TITLE_BASICS and TITLE_RATINGS on \"tconst\"\ncombo &lt;- TITLE_RATINGS |&gt;\n  left_join(TITLE_BASICS, by = \"tconst\")\n\n# Separate genres\ncombo3 &lt;- combo |&gt;\n  separate_longer_delim(genres, \",\")\n\n# Filter for successful action movies\nsuccessful_action_movies &lt;- combo3 |&gt;\n  filter(success == TRUE, \n         titleType == \"movie\", \n         genres %in% \"Action\") |&gt;\n  distinct(primaryTitle, .keep_all = TRUE) # Keep first occurrence of each title\n\n# Make a datatable\nsuccessful_action_movies &lt;- successful_action_movies |&gt;\n  select(tconst, startYear, primaryTitle, averageRating)\ndatatable(successful_action_movies)\n\n\n\n\n\nThis table shows all unique, successful action movies in the dataset.\nWe will now narrow the scope to decide on a movie. We will define a classic movie as follows:\n\nMade prior to 1999\nAt least 500,000 ratings\n\nHowever, for our purposes, we’ll stay within the 1990s, just so we can appeal more towards late Millenials and early Gen Z who want to see a twist on a classic from their childhood. These generations are the largest on Earth, pointing towards a substantial target audience.\n\n# Merge TITLE_BASICS and TITLE_RATINGS on \"tconst\"\ncombo &lt;- TITLE_RATINGS |&gt;\n  left_join(TITLE_BASICS, by = \"tconst\")\n\n# Separate the genres\ncombo2 &lt;- combo |&gt;\n  separate_longer_delim(genres, \",\")\n\n# Filter\nclassic_movie &lt;- combo2 |&gt;\n  filter(success == TRUE, \n         titleType == \"movie\", \n         genres == \"Action\", \n         between(startYear, 1990, 1999),      \n         numVotes &gt;= 500000) \n\n# Make the datatable\nclassic_movie &lt;- classic_movie |&gt;\n  select(tconst, startYear, primaryTitle, averageRating, numVotes) |&gt;\n  arrange(desc(numVotes))\ndatatable(classic_movie)\n\n\n\n\n\nNow that we’ve narrowed it down to 6 classics, we will select the movie with the most ratings, which is The Matrix."
  },
  {
    "objectID": "mp02.html#look-into-the-personnel-from-that-movie",
    "href": "mp02.html#look-into-the-personnel-from-that-movie",
    "title": "Mini-Project #02",
    "section": "Look Into the Personnel from that Movie",
    "text": "Look Into the Personnel from that Movie\nFor legal purposes, we must check to see if key actors, directors, or writers from The Matrix are still alive. If they are, we’ll need to ensure we can secure the rights to the project.\n\n# Establish The Matrix\ntop_movie &lt;- classic_movie |&gt;\n  arrange(desc(numVotes)) |&gt;\n  slice(1)\n\n# Grab The Matrix' tconst\ntop_movie_tconst &lt;- top_movie$tconst\n\n# Find associated people\nassociated_people &lt;- TITLE_PRINCIPALS |&gt;\n  filter(tconst == top_movie_tconst) |&gt;\n  select(nconst)\n\n# Filter for people still alive\nalive_people &lt;- NAME_BASICS |&gt;\n  filter(nconst %in% associated_people$nconst,\n         is.na(deathYear)) |&gt;\n  select(nconst, primaryName)\nprint(alive_people)\n\n# A tibble: 17 × 2\n   nconst    primaryName       \n   &lt;chr&gt;     &lt;chr&gt;             \n 1 nm0000206 Keanu Reeves      \n 2 nm0000401 Laurence Fishburne\n 3 nm0001592 Joe Pantoliano    \n 4 nm0005251 Carrie-Anne Moss  \n 5 nm0005428 Joel Silver       \n 6 nm0032810 Julian Arahanga   \n 7 nm0159059 Marcus Chong      \n 8 nm0204485 Don Davis         \n 9 nm0233391 Matt Doran        \n10 nm0565883 Belinda McClory   \n11 nm0665517 Owen Paterson     \n12 nm0691084 Bill Pope         \n13 nm0821205 Zach Staenberg    \n14 nm0905152 Lilly Wachowski   \n15 nm0905154 Lana Wachowski    \n16 nm0915989 Hugo Weaving      \n17 nm0938441 Shauna Wolifson   \n\n\nWe can see that 17 are still alive, so we will need legal counsel.\nIt would also be fun to include actors from the original movie in the project as a callback for the fans.\n\nassociated_actors &lt;- TITLE_PRINCIPALS |&gt;\n  filter(tconst == top_movie_tconst, \n         category %in% c(\"actor\", \"actress\")) |&gt;\n  select(nconst)\n\nalive_actors &lt;- NAME_BASICS |&gt;\n  filter(nconst %in% associated_actors$nconst,\n         is.na(deathYear)) |&gt;\n  select(nconst, primaryName)\nprint(alive_actors)\n\n# A tibble: 9 × 2\n  nconst    primaryName       \n  &lt;chr&gt;     &lt;chr&gt;             \n1 nm0000206 Keanu Reeves      \n2 nm0000401 Laurence Fishburne\n3 nm0001592 Joe Pantoliano    \n4 nm0005251 Carrie-Anne Moss  \n5 nm0032810 Julian Arahanga   \n6 nm0159059 Marcus Chong      \n7 nm0233391 Matt Doran        \n8 nm0565883 Belinda McClory   \n9 nm0915989 Hugo Weaving      \n\n\nBased on this code, we will try to request for Keanu Reeves and Laurence Fishburne to have a cameo role of sorts in our project."
  },
  {
    "objectID": "mp02.html#the-elevator-pitch",
    "href": "mp02.html#the-elevator-pitch",
    "title": "Mini-Project #02",
    "section": "The Elevator Pitch",
    "text": "The Elevator Pitch\nWe have an opportunity to capitalize on the surging demand for action films, which have seen a remarkable rise in success rates—up from just 0.2% overall to a solid 1.34% in the last decade. This genre is proving its staying power, especially with the right mix of talent and vision.\nAt the helm, we propose acclaimed director Sonia Bhatia, who recently delivered the highest IMDb-rated action movie of the past decade, Yudhra. Her distinct style combines cutting-edge visual storytelling with character-driven action sequences that resonate with today’s audiences.\nFor our cast, we’ll bring in two powerhouses: Kevin Spacey and Elijah Wood. Both actors have consistently delivered in the box office, each starring in at least three successful films. Their ability to bring depth and nuance to complex roles will elevate this project, especially in a high-concept action setting.\nThe story will draw inspiration from the best-rated action movie on IMDb, The Matrix. We aim to replicate the groundbreaking impact of that film by blending high-octane action with a mind-bending narrative. The unique combination of talent and proven story appeal gives us a strong edge in the marketplace.\nWith this package, we have the perfect formula for a modern blockbuster that both excites audiences and guarantees returns."
  },
  {
    "objectID": "mp02.html#the-trailer",
    "href": "mp02.html#the-trailer",
    "title": "Mini-Project #02",
    "section": "The Trailer",
    "text": "The Trailer\nThe marketing department has requested a classic 90’s style teaser for them to create a brief trailer for the next quarterly earnings call. We’ll now send them the following:\n“From director Sonia Bhatia, the visionary mind behind Yudhra; and from actors Kevin Spacey, Hollywood icon and beloved star of American Beauty, and Elijah Wood from The Lord of the Rings comes the timeless tale of The Matrix, a story of dystopian realities, relentless pursuit, and cutting-edge action. Coming soon to a theater near you!”\nThe sample movie poster can be found here."
  }
]